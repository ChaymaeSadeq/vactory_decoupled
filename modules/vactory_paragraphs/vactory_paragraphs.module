<?php

/**
 * @file
 * Contain related hooks.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_entity_base_field_info().
 */
function vactory_paragraphs_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'paragraph') {

    $fields['paragraph_identifier'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Paragraph ID'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', [
        'type'     => 'string_textfield',
        'settings' => [
          'display_label' => TRUE,
        ],
        'weight'   => 0,
      ])
      ->setDisplayConfigurable('form', TRUE);

    // @See vactory_paragraphs/templates/paragraph--vactory-paragraph-block.html.twig
    $fields['paragraph_container'] = BaseFieldDefinition::create('list_string')
      ->setLabel(t('Width'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setRequired(TRUE)
      ->setDefaultValue('narrow_width')
      ->setSetting('allowed_values', [
        'full_width'   => 'Full Width',
        'narrow_width' => 'Narrow Width',
        'no_container' => 'No Container',
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type'   => 'options_select',
        'weight' => -10,
      ]);

    $fields['paragraph_css_class'] = BaseFieldDefinition::create('string')
      ->setLabel(t('CSS class(es)'))
      ->setDisplayOptions('form', [
        'type'   => 'string_textfield',
        'weight' => 35,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setTranslatable(TRUE);

    $fields['paragraph_background_image'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Image'))
      ->setDescription(t('Set a background image.'))
      ->setSetting('target_type', 'media')
      ->setSetting('handler_settings', ['target_bundles' => ['image' => 'image']])
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type'   => 'media_library_widget',
        'weight' => 45,
      ]);

    $fields['paragraph_background_color'] = BaseFieldDefinition::create('colorapi_color_field')
      ->setLabel(t('Color'))
      ->setDescription(t('Set a background color.'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', [
        'type'   => 'jquery_colorpicker',
        'weight' => 45,
      ])
      ->setDisplayConfigurable('form', TRUE);

    $fields['paragraph_background_parallax'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Activer parallax'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', [
        'type'     => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ],
        'weight'   => 45,
      ])
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}
